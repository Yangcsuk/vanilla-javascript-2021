3.0 The Document Object
  - Javascript 가 HTML와 연결되어있다. HTML 을 불러 올 수도 있고, Javascript에서 수정도 가능하다~

3.1 HTML in Javascript
  - JavaScript로 HTML내의 객체(object)와 element를 가져오는 수 많은 document함수 내 함수들을 이용할 것이다.
  - document.getElementById("id이름") : "id이름"에 해당하는 html 정보를 얻는다
  - HTML에 작성한 내용보다 Javascript에 작성한 내용이 우선한다.
  - JS를 통해서 브라우져와 communication을 할 수 있고 그를 통해서 html을 변경할 수 있다.
  - server와 client사이에 주고받는것은 JS을 통해 이루어지지 html을 통해 이루어지지 않는다.

3.2 Searching For Elements
  - document.getElementsByClassName("xx") : 클래스 이름 "xx"내용을 불러온다(거의 안씀)
  - document.querySelector(".hello h1") : hello 클래스 안의 h1 (첫번째) 내용을 불러온다(중요)
  - 모든 내용을 불러오기 위해서는 querySelectorAll(뒤에 All) Function을 써준다

3.3~5 Events
  - (복습)document는 HTML이 app.js를 호출(load)했기 때문에 존재하는 것이다.
  - title.addEventListener("click", function) ; title을 클릭하면 function이 실행된다.
    -> 특정위치(title)의 Event(클릭)를 Listen(감지)하여 function(함수)을 실행한다.(JS의 기본)
        * 주의할 점은 function에 "(소괄호)"는 넣지 않는다. = JS가 대신 실행해준다(잘 이해 안감 아래참조)
           ()를 쓰면 그 자리에서 함수를 바로 호출하지만 click이라는 이벤트가 발생했을 "경우에" 
           handleTitleClick을 부르는 것이 목적이기 때문에 ()를 쓰는 게 아닙니다.
  - 기본적으로 css도 이런 event를 처리할 수도 있다.
  - window.addEventListener("resize",function); 윈도우 창 크기가 변경(resize)될 경우 function을 실행한다
  - window.addEventListener("copy",function); 복사버튼 누르면 function을 실행한다.(복사방지용 기능)

3.6~8 CSS in Javascript
  - 기본적으로 CSS가 할 수 있는 기능을 JS로 하는 것은 바람직하지 않다.
  - JS도 이런 기능(클릭하면 글자 색이 변경되는 등)이 있다는 정도로만 기억하자.
  - HTML <-> JS, HTML <-> CSS 이렇게 연동하고 직접적으로 JS <-> CSS 처리는 피하자
  - (깔끔코딩방법 1번)JS에서 function 내부에 raw string이 반복되면 const로 상수로 지정해두자
    왜냐면, JS Function 내부의 변수와 CSS 변수가 같이 쓰이면 오류가 발생할 수도 있어서?(머리로는 이해안됨)
  - classList : class들을 목록으로 작업할 수 있게끔 만들어줌(className은 이전 className을 없애고 새로 교체함)
  - classList.contains(xxxx) : classList 중 xxxx가 포함되어 있는지 확인해줌
  - classList.remove(xxxx) : classList 중 xxxx를 삭제해줌
  - classList.add(xxxx) : classList 중 xxxx를 더해줌
  - toggle function은 class name이 존재하는 지 확인해줌(위에 세 줄(contains, remove, add)기능을 통합해줌)
    -> 토큰을 toggle한다. 토큰이 존재한다면 토큰을 제거하고, 존재하지 않는다면 토큰을 추가한다.